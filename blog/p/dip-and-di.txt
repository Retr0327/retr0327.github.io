2:I[31351,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"default"]
3:I[35533,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"Title"]
4:I[77112,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"Anchor"]
5:I[6332,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],""]
6:I[9269,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"AspectRatio"]
7:I[25539,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"Image"]
8:I[67313,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"CodeHighlight"]
9:I[77043,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"Code"]
a:I[88061,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","528","static/chunks/app/blog/p/dip-and-di/page-c4c1b2ea6bcf2451.js"],"default"]
b:I[15554,[],""]
c:I[75813,[],""]
0:["PKp9X1ItScTni3N-k4dp4",[[["",{"children":["blog",{"children":["p",{"children":["dip-and-di",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":["p",{"children":["dip-and-di",{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"metadata":{"slug":"dip-and-di","title":"Dependency Inversion Principle & Dependency Injection","createdAt":"2023-01-26","updatedAt":"2023-02-13","excerpt":"這篇想要記錄的是我在學 design patterns (設計模式) 的過程時，常常分不清 dependency injection 和 dependency inversion 之間的關係。因此借機寫成一個 blog，幫自己重新了解一次。","category":["design pattern"],"coverImage":"https://stackify.com/wp-content/uploads/2018/06/Design-Patterns-Explained-%E2%80%93-Dependency-Injection-with-Code-Examples.png"},"children":[[["$","div",null,{"id":"tl-dr","data-heading":"TL; DR","data-order":2,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":2,"className":"MdxTitle_title__cWM_A","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#tl-dr","children":"TL; DR"}]}]],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["Dependency injection (DI) 是一種實現 dependency inversion principle (DIP) 的技術，而 DIP 是一種設計原則",["$","sup",null,{"children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","component":"$5","href":"#user-content-fn-1","id":"user-content-fnref-1","data-footnote-ref":true,"aria-describedby":"footnote-label","children":"1"}]}],"。"]}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["$","$L6",null,{"ratio":1.7777777777777777,"style":{"maxWidth":"calc(34.375rem * var(--mantine-scale))","paddingTop":"$undefined","paddingBottom":"$undefined"},"children":["$","$L7",null,{"src":"https://www.tutorialsteacher.com/Content/images/ioc/principles-and-patterns.png","alt":"di-dip-relationship","pt":"calc(1.25rem * var(--mantine-scale))","pb":"calc(1.25rem * var(--mantine-scale))"}]}]}],"\n",["$","ul",null,{"className":"MdxTypography_ul__PanGi","children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["DIP 是一種「設計原則」，強調高階模組不應該依賴於低階模組",["$","sup",null,{"children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","component":"$5","href":"#user-content-fn-2","id":"user-content-fnref-2","data-footnote-ref":true,"aria-describedby":"footnote-label","children":"2"}]}],"，而是應該依賴於抽象。"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"DI：是「實現 DIP」的方法，將 dependency 通過「注入」的方式提供給需要的 class 或 function。"}],"\n"]}],"\n",[["$","div",null,{"id":"依賴反轉原則-dependency-inversion-principle-dip","data-heading":"依賴反轉原則 (Dependency Inversion Principle, DIP)","data-order":2,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":2,"className":"MdxTitle_title__cWM_A","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#依賴反轉原則-dependency-inversion-principle-dip","children":"依賴反轉原則 (Dependency Inversion Principle, DIP)"}]}]],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["首先，為何要說「反轉」呢？更精確地說，",["$","strong",null,{"children":"為何要反轉呢"}],"？這是因為我們在開發的時候，往往都是讓大功能（高階模組）調用各個小功能（低階模組）來實現目標，但隨著層次越高，底下依賴的模組越多，所要改動的頻率就會提高。為了解耦 (decoupling)，DIP\n提出了幾個重要的原則："]}],"\n",["$","ul",null,{"className":"MdxTypography_ul__PanGi","children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"使高階模組（呼叫者 caller）不再直接依賴低階模組（被呼叫者 callee），兩者都該依賴抽象"}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"抽象不應該依賴於具體實作方式。"}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"具體實作方式則應該依賴抽象。"}],"\n"]}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"DIP 告訴開發者應該要把重點放在「功能」上，不應該用低階模組去拼湊出高階，而是應該用「抽象層 (abstract\nclass、interface)」去隔開實作，解開高階與低階之間的耦合\n(coupling)。"}],"\n",["$","$L8",null,{"withCopyButton":false,"code":"# 原本的關係\n高階模組 → 低階模組\n\n# 反轉後\n高階模組 → 介面 ← 低階模組\n","language":"bash","className":"MdxPre_code__9lrHE"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"高階模組提出它需要的功能，低階模組去實作出這些功能、達成高階模組的目標，就好比「公司為了做好的網站（高階模組的目標）」，開出了「應徵條件（介面）」，而我們前去應徵（低階模組的實作）。"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"講完一些專有名詞，我們用 Python 來實作看看："}],"\n",["$","ul",null,{"className":"MdxTypography_ul__PanGi","children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"沒有使用 DIP："}],"\n",["$","$L8",null,{"withCopyButton":false,"code":"class PostgreSQL:\n    def save(self, data: str) -> None:\n        print(f\"{data} has been saved to PostgreSQL!\")\n\ndef main() -> None:\n    pg = PostgreSQL()\n    pg.save(\"1@mail.com\")\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["乍看之下這樣寫似乎沒有什麼問題，但哪天我們不想用 ",["$","$L9",null,{"children":"PostgreSQL"}]," 類別而是想用 ",["$","$L9",null,{"children":"MongoDB"}]," 類別呢？"]}],"\n",["$","$L8",null,{"withCopyButton":false,"code":"class MongoDB:\n    def save(self, data: str) -> None:\n        print(f\"{data} has been saved to MongoDB!\")\n\ndef main() -> None:\n    mongo = MongoDB()\n    mongo.save(\"1@mail.com\")\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["如果一直換 database 種類，",["$","$L9",null,{"children":"main()"}]," 豈不是每次都要修改，把代碼給寫死不是一個好辦法，因為會產生預想不到的耦合 (coupling)。"]}],"\n"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"使用 DIP："}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["為了使 ",["$","$L9",null,{"children":"main()"}]," 不再直接與 ",["$","$L9",null,{"children":"PostgreSQL"}]," 類別耦合 (coupling)，我們需要一個介面 (interface) 或抽象類別 (abstract\nclass)："]}],"\n",["$","$L8",null,{"withCopyButton":false,"code":"from abc import ABC, abstractmethod\n\nclass Database(ABC):\n    @abstractmethod\n    def save(self, data: str) -> None:\n        pass\n\nclass PostgreSQL(Database):\n    def save(self, data: str) -> None:\n        print(f\"{data} has been saved to PostgreSQL!\")\n\ndef main() -> None:\n    pg = PostgreSQL()\n    pg.save(\"1@mail.com\")\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["這樣就實現了 DIP，主程式不再直接與 ",["$","$L9",null,{"children":"PostgreSQL"}]," 類別耦合。如果你需要更換資料存儲方式，只需要實現一個新的類別並實現\n",["$","$L9",null,{"children":"Database"}]," 抽象類別即可。"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["到這裡，不知道你有沒有發現什麼問題？我們在使用 ",["$","$L9",null,{"children":"Database"}]," 功能之前，還是得先建立該類別的 instance (實例)，也就是\n",["$","$L9",null,{"children":"pg = PostgreSQL()"}],"，這樣豈不是直接依賴了 ",["$","$L9",null,{"children":"PostgreSQL"}]," 嗎？「依賴關係」是反轉了，但是還是要有 instance (實例)\n才能使用。也就是說，這違反了 SOLID 中的 I (Interface Segregation Principle)。",["$","$L9",null,{"children":"main()"}]," 不應知道具體的 instance\nclass (實作類別) 是誰，具體的實作 應是可「替換」的。將對具體的依賴更改為對抽象的依賴，仍然是不夠的。面對這種問題，程式大老們提出了許多個解決的方法，其中一個就是\ndependency injection (依賴注入)。"]}],"\n",["$","$La",null,{"children":["\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"[Arjan from ArjanCodes]Without dependency injection, there is no dependency inversion principle."}],"\n"]}],"\n",[["$","div",null,{"id":"依賴注入-dependency-injection-di","data-heading":"依賴注入 (Dependency Injection, DI)","data-order":2,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":2,"className":"MdxTitle_title__cWM_A","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#依賴注入-dependency-injection-di","children":"依賴注入 (Dependency Injection, DI)"}]}]],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"DI 指的是用各種方法把「低階模組」丟到「高階模組」裡。它將物件之間的依賴關係轉移到「創建物件」的地方。它的目的是為了減少耦合性，使得系統更加靈活和可維護。"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":"我們依舊用 database 的例子來實作 DI："}],"\n",["$","$L8",null,{"withCopyButton":false,"code":"from abc import ABC, abstractmethod\n\nclass Database(ABC):\n    @abstractmethod\n    def save(self, data: str) -> None:\n        pass\n\nclass PostgreSQL(Database):\n    def save(self, data: str) -> None:\n        print(f\"{data} has been saved to PostgreSQL!\")\n\nclass MongoDB(Database):\n    def save(self, data: str) -> None:\n        print(f\"{data} has been saved to MongoDB!\")\n\nclass UserService:\n    def __init__(self, db: Database) -> None:\n        self.db = db\n\n    def save_user(self, email: str):\n        self.db.save(email)\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["在這個例子中，我們利用建構式 ",["$","$L9",null,{"children":"__init__"}]," 的方式，從外部傳入 ",["$","$L9",null,{"children":"Database"}],"\n抽象類別的實體來使用。我們再也不用為了換 database 而改變代碼，也不用因為實作細節或是方法名稱而煩惱，只要照 ",["$","$L9",null,{"children":"Database"}]," 使用就可以了。"]}],"\n",["$","ul",null,{"className":"MdxTypography_ul__PanGi","children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["\n",["$","$L8",null,{"withCopyButton":false,"code":"def main():\n    pg = PostgreSQL()\n    user = UserService(pg)\n    user.save_user(\"1@mail.com\")\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["\n",["$","$L8",null,{"withCopyButton":false,"code":"def main():\n    mongo = MongoDB()\n    user = UserService(mongo)\n    user.save_user(\"1@mail.com\")\n","language":"python","className":"MdxPre_code__9lrHE"}],"\n"]}],"\n"]}],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["至於要傳遞哪個 instance 進來，這份工作要交給開發者或當下的情境，就讓身為控制中心的 ",["$","$L9",null,{"children":"main()"}]," 去決定，大家各司其職，落實\nSOLID 中的 S (Single Responsibility)。"]}],"\n",[["$","div",null,{"id":"總結","data-heading":"總結","data-order":2,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":2,"className":"MdxTitle_title__cWM_A","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#總結","children":"總結"}]}]],"\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["其實 DIP 與 DI 之間的關係是有",["$","strong",null,{"children":"先後順序"}],"的："]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["DIP 告訴我們依賴的對象應該是「功能」","\n",["$","ul",null,{"className":"MdxTypography_ul__PanGi","children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":[["$","strong",null,{"children":"高階模組不應該依賴於低階模組，兩者都應該依賴抽象"}],"：用 interface (介面) 或 abstract class (抽象類) 來進行隔離。"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":[["$","strong",null,{"children":"抽象不應該依賴細節。細節應該依賴抽象"}],"：interface (介面) 或 abstract class (抽象類) 應該是高階模組提出的要求，然後才去使用實作了這些要求的低階模組。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"為了解決介面實例化仍然會產生依賴的問題，為了解決就有了像是 dependency injection (DI) 等方法"}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":"DI：藉由從「建構式傳遞」等方式，把低階模組交給高階模組使用者"}],"\n"]}],"\n",[["$","div",null,{"id":"參考資料","data-heading":"參考資料","data-order":4,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":4,"className":"MdxTitle_title__cWM_A","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#參考資料","children":"參考資料"}]}]],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","href":"https://lotabout.me/2018/Dependency-Inversion-Principle/","target":"_blank","rel":"noopener noreferrer","children":"DIP vs IoC vs DI"}]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","href":"https://igouist.github.io/post/2020/12/oo-14-dependency-inversion-principle/","target":"_blank","rel":"noopener noreferrer","children":"菜雞與物件導向 (14): 依賴反轉原則"}]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","href":"https://notfalse.net/1/dip","target":"_blank","rel":"noopener noreferrer","children":"依賴反向原則 (Dependency-Inversion Principle, DIP)"}]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","children":["$","$L4",null,{"className":"MdxLink_link__CKKCO","href":"https://www.youtube.com/watch?v=2ejbLVkCndI&t=125s","target":"_blank","rel":"noopener noreferrer","children":"Dependency INVERSION vs dependency INJECTION in Python"}]}],"\n"]}],"\n","\n",["$","section",null,{"data-footnotes":true,"className":"footnotes","children":[[["$","div",null,{"id":"footnote-label","data-heading":"Footnotes","data-order":2,"className":"MdxTitle_offset__yCR87"}],["$","$L3",null,{"order":2,"className":"sr-only","children":["$","a",null,{"className":"MdxTitle_link__MO4c7","href":"#footnote-label","children":"Footnotes"}]}]],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","id":"user-content-fn-1","children":["\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["SOLID 中的 D 就是 dependency inversion。 ",["$","$L4",null,{"className":"data-footnote-backref","component":"$5","href":"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1","children":"↩"}]]}],"\n"]}],"\n",["$","li",null,{"className":"MdxTypography_li__qjb7m","id":"user-content-fn-2","children":["\n",["$","p",null,{"className":"MdxTypography_paragraph__McJVe","children":["高階與低階，指的是「相對關係」，也就是「呼叫者 (caller)」與「被呼叫者 (callee)」之間的關係。 ",["$","$L4",null,{"className":"data-footnote-backref","component":"$5","href":"#user-content-fnref-2","data-footnote-backref":"","aria-label":"Back to reference 2","children":"↩"}]]}],"\n"]}],"\n"]}],"\n"]}]]}]],null],null]},["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","p","children","dip-and-di","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","p","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$Ld",null],null],[[["$","link","0",{"rel":"stylesheet","href":"https://retr0327.github.io/_next/static/css/60d462af1d9855cb.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"https://retr0327.github.io/_next/static/css/4c8d1ee479f99e2d.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"https://retr0327.github.io/_next/static/css/c43a3ae8e86c29ca.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"https://retr0327.github.io/_next/static/css/000e3b942933cc86.css","precedence":"next","crossOrigin":"$undefined"}]],"$Le"]]]]
f:I[55269,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"ColorSchemeScript"]
10:I[45952,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],""]
11:I[18449,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"default"]
12:I[28079,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"MantineProvider"]
13:I[14892,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"default"]
14:I[60717,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"MdxMetadataProvider"]
17:I[21270,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"default"]
18:I[40894,["881","static/chunks/881-066b7491228e6311.js","989","static/chunks/989-e4e9b642269199b4.js","567","static/chunks/567-7e1e8a7e707cc2b7.js","999","static/chunks/999-5ade9e54a051e74a.js","408","static/chunks/408-e7b936ba977c3526.js","185","static/chunks/app/layout-4aa274ebf751fa7e.js"],"default"]
19:I[88331,["881","static/chunks/881-066b7491228e6311.js","160","static/chunks/app/not-found-d1c5ce46554d2e4d.js"],"Container"]
1a:I[78574,["881","static/chunks/881-066b7491228e6311.js","160","static/chunks/app/not-found-d1c5ce46554d2e4d.js"],"Text"]
1b:I[86940,["881","static/chunks/881-066b7491228e6311.js","160","static/chunks/app/not-found-d1c5ce46554d2e4d.js"],"Group"]
1c:I[75387,["881","static/chunks/881-066b7491228e6311.js","160","static/chunks/app/not-found-d1c5ce46554d2e4d.js"],"Button"]
16:["design pattern"]
15:{"slug":"dip-and-di","title":"Dependency Inversion Principle & Dependency Injection","createdAt":"2023-01-26","updatedAt":"2023-02-13","excerpt":"這篇想要記錄的是我在學 design patterns (設計模式) 的過程時，常常分不清 dependency injection 和 dependency inversion 之間的關係。因此借機寫成一個 blog，幫自己重新了解一次。","category":"$16","coverImage":"https://stackify.com/wp-content/uploads/2018/06/Design-Patterns-Explained-%E2%80%93-Dependency-Injection-with-Code-Examples.png"}
d:["$","html",null,{"lang":"en","translate":"no","children":[["$","head",null,{"children":["$","$Lf",null,{}]}],[["$","$L10",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-SF3HJM8QQL"}],["$","$L10",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\n\ngtag('config', 'G-SF3HJM8QQL');\n"}]],["$","$L11",null,{}],["$","body",null,{"children":["$","$L12",null,{"theme":"$13","children":["$","$L14",null,{"metadata":[{"slug":"sql-group-by","title":"理解 GROUP BY","createdAt":"2023-04-16","excerpt":"之前在紀錄 ORM 時有提到為了避免 N+1，可以用 GROUP BY 來避免。因為 GROUP BY 很常在 SQL 中使用，所以是應該好好記下來才行。","category":["sql"],"coverImage":"https://www.aviator.co/blog/wp-content/uploads/2023/03/postgres-logo-1024x576.png"},"$15",{"slug":"orm","title":"ORM 基礎觀念","createdAt":"2023-02-07","updatedAt":"2023-02-13","excerpt":"很常在後端開發使用 ORM (Object-Relational Mapping) 來處理 database，但卻沒有清楚為何該使用它，只知道很多人推薦，於是打算好好紀錄一番。","category":["sql"],"coverImage":"https://miro.medium.com/max/1200/1*Tz54hHWz7O2nWu5AeajVWQ.png"},{"slug":"hello-world","title":"孤獨的程式廢人 - Why Have a Blog?","createdAt":"2023-01-21","updatedAt":"2023-01-23","excerpt":"這篇講述了筆者為何突然在某個深夜突然想要重啟自己多年想要寫 blog 的計畫，礙於當時啥都不會只能套用別人的模板，導致無法做出自己想要的樣子。3 年後，且在參與多項計畫後，將帶著所學到的技術嘗試重返最初的感動。","category":["experience","blog"],"coverImage":"https://i.imgur.com/aAe4oVE.png"}],"children":["$","$L17",null,{"children":["$","$L18",null,{"children":["$","$Lb",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"ErrorPage_container__CoPe5","children":["$","div",null,{"className":"ErrorPage_wrapper__MRbw_","children":["$","div",null,{"className":"ErrorPage_content__kCvCb","children":["$","$L19",null,{"className":"ErrorPage_inner__Lw4pe","children":[["$","div",null,{"className":"ErrorPage_label__DDC_N","children":"404"}],["$","$L3",null,{"className":"ErrorPage_title__qdItw","children":"You have found a secret place."}],["$","$L1a",null,{"size":"lg","ta":"center","className":"ErrorPage_description__VoWvV","children":"Unfortunately, this is only a 404 page. You may have mistyped the address, or the page has been moved to another URL."}],["$","$L1b",null,{"justify":"center","children":["$","$L1c",null,{"variant":"outline","component":"$5","href":"/","size":"md","children":"Take me back to home page"}]}]]}]}]}]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"https://retr0327.github.io/_next/static/css/b46f2ba0cc8f147e.css","precedence":"next","crossOrigin":"$undefined"}]],"styles":null}]}]}]}]}]}]]}]
e:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, user-scalable=no"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Dependency Inversion Principle & Dependency Injection"}],["$","meta","3",{"name":"category","content":"design pattern"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
